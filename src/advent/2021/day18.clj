(ns advent.2021.day18
  (:require [clojure.math.combinatorics :as combo]
            [plumbing.core :refer :all]))

(def homework
  [[[[3, 9], [7, 2]], [[8, 4], [[5, 6], 0]]]
   [[[1, [4, 9]], [[1, 8], [1, 5]]], [[[2, 6], [6, 7]], [[4, 6], [9, 0]]]]
   [[[[9, 2], 1], [[0, 7], [9, 6]]], [[5, 9], [7, [6, 9]]]]
   [8, 9]
   [[4, [6, 1]], [2, [[6, 7], 2]]]
   [[6, [[4, 1], 5]], [4, 9]]
   [[[0, 6], [8, [8, 5]]], [6, 9]]
   [[0, [1, 0]], [[8, [7, 4]], [[1, 1], [5, 0]]]]
   [[[1, [0, 1]], 6], [1, 9]]
   [[2, [[9, 0], [6, 1]]], [[8, 4], [5, 7]]]
   [[[[5, 3], [0, 9]], [1, [0, 7]]], [[9, 0], [2, [2, 0]]]]
   [[2, [2, [6, 8]]], [[9, [5, 4]], [4, [3, 4]]]]
   [[[[4, 0], [7, 0]], [[4, 8], [5, 8]]], [[[7, 2], [2, 2]], [[3, 3], 3]]]
   [[5, 0], 5]
   [[8, [[5, 0], 2]], [6, [5, 1]]]
   [[[9, [8, 8]], [8, 7]], [[[4, 2], 4], [[5, 1], [4, 8]]]]
   [[[[1, 1], 3], 5], 9]
   [[[[1, 7], [6, 5]], 5], [[0, 6], 0]]
   [[9, 6], 2]
   [[[2, [0, 8]], [8, [2, 1]]], 5]
   [[[9, [3, 7]], 3], [0, [5, 9]]]
   [[[2, [1, 7]], 6], [[7, [8, 2]], [[8, 2], 8]]]
   [[[[1, 2], 1], 5], 2]
   [4, [8, [3, 9]]]
   [[[[8, 9], [6, 0]], [[1, 6], 7]], 8]
   [[2, [8, 1]], 3]
   [[2, 2], [[8, [0, 2]], [[5, 0], 5]]]
   [9, [2, [[6, 1], [8, 9]]]]
   [[4, [[6, 6], 4]], [[[9, 3], [3, 1]], 5]]
   [[[7, 8], 1], 0]
   [[[8, 8], [[1, 0], 7]], [4, 6]]
   [9, 8]
   [[[[4, 2], 9], [[9, 9], 7]], [7, [9, [5, 8]]]]
   [[4, [4, [3, 3]]], 8]
   [0, 2]
   [[4, [5, 5]], [9, [[6, 9], 4]]]
   [[[7, 3], [[1, 2], 6]], [[[2, 4], [6, 7]], [[5, 0], 9]]]
   [[[[2, 0], 5], [4, 5]], [[[6, 5], [6, 0]], [1, [3, 4]]]]
   [[3, [6, 8]], [[[3, 0], 0], [[2, 8], 7]]]
   [[[4, [6, 2]], [9, [4, 1]]], [8, [3, 4]]]
   [[[6, [6, 8]], [7, [2, 0]]], [4, [[8, 7], [1, 6]]]]
   [2, [0, [4, 0]]]
   [[[[0, 5], 1], 8], [[9, [0, 3]], 3]]
   [[[3, [5, 2]], [3, [3, 2]]], [[[7, 3], 1], 7]]
   [1, [[[1, 8], [1, 7]], 0]]
   [[8, 6], [[0, 4], 4]]
   [[[8, 2], [4, 6]], 3]
   [5, [[[7, 5], [4, 5]], [0, 2]]]
   [[3, [3, 6]], 6]
   [[[[6, 8], [5, 7]], [[7, 3], 5]], [[8, [4, 8]], 8]]
   [[[[5, 8], [3, 1]], [[3, 7], [7, 0]]], [[9, 7], 0]]
   [[2, [[5, 3], 8]], 0]
   [0, [2, 8]]
   [[8, 9], [[[2, 2], [4, 7]], [[4, 0], 1]]]
   [[[[3, 0], 8], [[7, 3], [6, 1]]], [[3, 8], [4, 2]]]
   [[[[6, 7], [4, 3]], [[3, 9], 5]], 8]
   [[[7, 7], [[3, 4], 7]], [[[0, 4], 1], 9]]
   [[[7, 5], 5], [[2, [9, 9]], [0, [3, 5]]]]
   [[[[3, 3], [6, 1]], [5, 8]], [[4, 7], [8, 1]]]
   [[[0, [7, 3]], [6, [7, 2]]], [[0, 8], 7]]
   [[[2, 7], [9, 7]], [8, [3, 8]]]
   [[[0, 2], 6], [[9, [6, 5]], [[3, 9], 1]]]
   [[7, [[3, 4], [2, 8]]], [[[4, 1], 4], 7]]
   [[3, [[3, 4], 6]], [[3, 9], [[4, 5], [3, 0]]]]
   [[[5, [5, 1]], [2, 4]], [1, [[1, 6], 6]]]
   [[[5, 6], [[1, 3], [5, 0]]], [[[4, 1], 8], [5, 5]]]
   [[[[2, 0], 7], [[8, 9], 1]], [[[4, 0], [1, 6]], 1]]
   [[[2, 0], [[4, 2], [9, 9]]], [4, 9]]
   [[[[1, 9], 6], 2], [[5, 4], [2, 4]]]
   [[[[4, 1], [4, 5]], [[2, 3], 2]], [3, [[8, 8], 1]]]
   [[[[8, 1], 0], [2, 2]], [[2, [7, 1]], 1]]
   [[[7, 4], [[1, 3], 5]], [[6, 8], [[0, 0], 2]]]
   [[[1, 2], 8], [[[1, 7], [4, 0]], [[8, 2], 8]]]
   [[[0, 8], [3, 6]], [[[5, 3], 7], [9, 7]]]
   [[4, 6], [[[7, 9], [7, 5]], [[4, 6], [8, 4]]]]
   [[[[7, 3], 0], [[6, 2], [7, 2]]], [9, [[8, 0], 3]]]
   [[[3, 0], 1], [[2, 3], 1]]
   [[[5, [8, 6]], [[1, 2], 2]], [[[1, 4], 6], [5, [7, 1]]]]
   [[[[1, 5], 8], [0, 0]], 4]
   [[[7, [6, 8]], 3], [[5, 1], [[2, 8], [4, 6]]]]
   [3, [[[5, 8], [4, 5]], [[7, 7], 8]]]
   [[6, [7, [8, 2]]], [[9, 0], 0]]
   [[[8, [7, 6]], 1], [[2, 4], 6]]
   [[[[0, 4], 2], [0, 7]], [6, 6]]
   [1, [[1, 9], [9, 3]]]
   [[[[5, 2], [5, 3]], [[9, 0], 4]], 2]
   [[[[5, 5], 3], [7, [1, 2]]], [6, [7, 2]]]
   [[[[2, 1], 3], 8], [[2, [8, 2]], [7, 4]]]
   [[8, [9, [1, 8]]], [[[4, 4], [0, 6]], [6, 3]]]
   [[[1, 6], [1, [2, 5]]], 0]
   [[[[0, 1], [7, 2]], [[7, 2], 3]], [2, [[7, 8], [0, 7]]]]
   [[[[1, 8], 8], [[5, 7], [3, 4]]], [[[2, 5], [7, 4]], [[8, 4], 9]]]
   [[[2, 2], [5, [1, 0]]], [[[6, 6], [3, 0]], [[8, 5], 5]]]
   [[[[8, 2], [4, 8]], [9, 4]], [[8, [7, 9]], 0]]
   [[3, [5, [2, 4]]], [[[8, 1], 0], [[0, 4], [4, 5]]]]
   [[5, [9, [3, 8]]], [4, [1, [5, 2]]]]
   [[[3, [0, 6]], [7, [8, 7]]], [[6, 8], [[8, 7], 0]]]
   [[[[0, 2], 5], [4, 6]], 3]
   [[6, 7], [[1, [4, 6]], 9]]
   [7, [3, [[8, 8], 5]]]])

(defn add-left [x n]
  (cond
    (nil? n)
    x
    (number? x)
    (+ x n)
    :else
    [(add-left (first x) n) (last x)]))

(defn add-right [x n]
  (cond
    (nil? n)
    x
    (number? x)
    (+ x n)
    :else
    [(first x) (add-right (last x) n)]))

(declare explode)

(defn explode-branches [[a b :as x] n]
  (if-let [[left a right] (explode a (dec n))]
    [left [a (add-left b right)] nil]
    (when-let [[left b right] (explode b (dec n))]
      [nil [(add-right (first x) left) b] right])))

(defn explode
  ([x]
   (when-let [[_ x _] (explode x 4)] x))
  ([x n]
   (cond
     (number? x)
     nil
     (= n 0)
     [(first x) 0 (last x)]
     :else
     (explode-branches x n))))

(declare split)

(defn split-branches [[a b]]
  (if-let [split-a (split a)]
    [split-a b]
    (when-let [split-b (split b)]
      [a split-b])))

(defn split [x]
  (if (number? x)
    (when (>= x 10) [(int (/ x 2)) (int (Math/ceil (/ x 2)))])
    (split-branches x)))

(defn add [[a b]]
  (loop [x [a b]]
    (if-let [changed (or (explode x) (split x))]
      (recur changed)
      x)))

(defn magnitude [x]
  (if (number? x)
    x
    (+ (* 3 (-> x first magnitude))
       (* 2 (-> x last magnitude)))))

(defn run []
  (->> (combo/permuted-combinations homework 2)
       (map add)
       (map magnitude)
       (reduce max)))
